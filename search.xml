<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mysql 基础]]></title>
    <url>%2F2019%2F07%2F31%2Fmysql-%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[mysql 语法规范 不区分大小写，但建议关键字大写，表名，列名小写。 分号结尾。 每条命令根据需要缩进，换行。 注释单行用 # 号，多行 / 注释 / mysql 常用命令123456use test #使用 test 数据库show tables #查看数据库中的所有表show tables form mysql #查看 mysql 数据库中的表select database() #查看当前在哪个数据库desc table #查看表的结构select version() #查看 mysql 版本 mysql 基础查询 语法： select 查询列表 from 表名 特点 查询列表可以是：表中的字段、常量值、表达式、函数。 查询的结果是一个虚拟的表格。12345678910111213141516171819202122232425262728293031# 1.查询列select * from table;select `name`,`age` from table;# 2.查询常量值select 100;select &apos;john&apos;;# 3.查询表达式select 100*90;# 4.查询函数select version();# 5.起别名select 100*90 as 结果;select name 姓名 from table;# 6.去重复select distinct name from table;# 7. 拼接 NULL 和任何数据链接都为 NULL 可以用函数 IFNULL(NULL,0)select concat(name,age) from table;select concat(name,IFNULL(age,0)) from table;# 8.查询 姓名第三个字符为e第五个字符为aselect * from users where name like &apos;__e_a%&apos;;# 9.查询 姓名第二个字符为_的员工名select * from users where name like &apos;_\_%&apos;;或者select * from users where name like &apos;_$_%&apos; ESCAPE &apos;$&apos;;# 10. 查询没有奖金的用户（null），有奖金的用户（not null）select * form users where bonus is NULL;(不能用=号)select * form users where bonus is not NULL;(不能用!=号)# 11. 按姓名长度排序select LENGTH(name) as l,name from users order by l;# 12. 先按工资排序，再按编号排序select * from user order by salary,id mysql 常见函数1.单行函数1234567891011121314151617181920212223242526272829# 1.length 获取参数字节个数select LENGTH(&apos;john&apos;);select LENGTH(&apos;张三丰&apos;); # 中文字节个数与字符集相关show variables like &apos;%char%&apos;; #查看字符集# 2.concat 拼接字符select CONCAT(&apos;name&apos;,&apos;age&apos;);# 3.upper 、 lowerselect UPPER(&apos;honf&apos;);select lower(&apos;JFD&apos;);#4.substr、substring# mysql 索引从 1 开始select SUBSTR(&apos;李莫愁爱上了陆展元&apos;,7) output # 陆展元select SUBSTR(&apos;李莫愁爱上了陆展元&apos;,1，3) output # 李莫愁#5. instr 返回子串第一次出现的索引，找不到返回0select instr(&apos;杨不悔爱上了殷六侠&apos;,&apos;殷六侠&apos;);#6. trim 截取字符串两边的符号select TRIM(&apos; 张翠山 &apos;);select TRIM(&apos;a&apos; from &apos;aaa张aaa翠山aaa&apos;);#7.lpad、rpad 用指定的字符实现左、右填充到指定长度select lpad(&apos;fd&apos;,&apos;10&apos;,&apos;*&apos;)#8. replace 替换select REPLACE(&apos;周芷若&apos;,&apos;周芷若&apos;,&apos;赵敏&apos;) as out_put; 2.数学函数1234567891011# 1.round 四舍五入select ROUND(-1.45)select ROUND(1.567,2) # 保留两位小数# 2. ceil 向上取整select CEIL(1.01)# 3.floor 向下取整select FLOOR(9.9)# 4.truncate 截断select TRUNCATE(1.6999,1);保留几位小数$ 5.mod 取余select MOD(10,3); 3.日期函数123456789101112131415# 1.now 返回丹铅系统日期 + 时间select NOW(); # 2019-07-18 11:12:34# 2. curdate 返回当前系统日期，不包含时间select CURDATE(); # 2019-07-18# 3. curtime 返回当前时间，不包含日期select CURTIME();# 11:12:34# 4.可以获取指定的部分， 年、月、日、小时、分钟、秒select YEAR(NOW());select MONTH(NOW());select MONTHNAME(NOW());#....# 5.str_to_date 将字符通过指定格式转换成日期SELECT STR_TO_DATE(&apos;1998-3-2&apos;,&apos;%Y-%m-%d&apos;);# 6.date_format 将日期转换成指定格式的字符select DATE_FORMAT(NOW(),&apos;%y年%m月%d日&apos;); 4.其他函数123select VERSION();select DATABASE();select USER(); 5.流程控制函数123456# 1.if函数select IF(10&gt;5,&apos;大&apos;,&apos;小&apos;);# 2.case 函数的使用一：switch case 的效果，等值判断select salary,id, case id when 1 then salary*2 when 2 then salary*3 else salary end as 新工资 from users;# 3.case 函数的使用二：条件判断select salary,case when salary&gt;20000 then &apos;A&apos; when salary&gt;10000 then &apos;B&apos; else &apos;D&apos; end as 工资级别 from users; 6.分组函数 sum,avg,max,min,count 1.简单使用12select sum(salary) from users;select sum(salary),avg(salary) from users; 2.参数支持哪些类型？ sum,avg 只支持数值型 max,min,count 支持任何类型 count,sum,avg,max,min 遇到 NULL 时不计数3.搭配 distinct1select SUM(distinct salary),SUM(salary),COUNT(DISTINCT salary) from users; 4.count 具体介绍123select COUNT(salary) from users;select COUNT(*) from users;select COUNT(1) from users; 5.分组查询123456789# 查询每个工种的最高工资select max(salary),job_id from users group BY job_id;# 分组后的查询# 查询哪个部门的员工个数&gt;2select count(*),department_id from users group BY department_id having count(*) &gt;2;# 查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资select max(salary),job_id from users where commission_pct is not null group BY job_id having max(salary) &gt; 12000;# 按多个字段分组select avg(salary),department_id,job_id from `users` group by department_id,job_id; 6.连接查询1234567891011121314151617181920212223242526272829303132333435363738394041424344#连接按功能分类# 一. 内连接 查询表的交集部分 # 等值连接 # 非等值连接 # 自连接# 二. 外连接 查询主表所有记录 和 匹配的从表记录（未匹配显示null） # 左外连接 left join 左边是主表 # 右外连接 right join 右边是主表# 三. 交叉连接#### sql92 语法（只支持内连接）# beauty m行，boys n行# 从 beauty 和 boys 表中取出 name 和 boyName 会出现笛卡尔乘积 m*nselect name,boyName from beauty,boys;# 1.等值连接 加条件限制 select name,boyName from beauty,boys where beauty.id=boys.boyfriend_id; # 给表起别名 select name,boyName from beauty be,boys bo where be.id=bo.boyfriend_id; # 添加筛选条件 select name,boyName from beauty be,boys bo where be.id=bo.boyfriend_id and name like &apos;_o%&apos;; # 添加分组 select count(*),city from departments d,locations l where d.location_id = l.location_id group by city; # 支持多表连接# 2.非等值连接 select salary,grade_level from employees e,job_grades g where salary between g.lowest_sal and highest_sal;# 3.自连接 # 查询员工和上级的姓名 select e.employee_id,e.last_name,m.employee_id,m.last_name from employees e,employees m where e.manager_id=m.employee_id;# # # # sql99 语法# 内连接# 1.等值连接 inner 可以省略 select last_name,department_name from departments d inner join employees e on e.department_id = d.department_id; # 其他内连接类似# 2.外连接 # 查询 男朋友不在男神表中的女神名称 select b.name FROM beauty b left outer join boys bo on b.boyfriend_id=bo.id where id is NULL;# 3.交叉连接 # 就是笛卡尔乘积 select b.*,bo.* from beauty b cross join boys bo; 7.子查询 出现在其他语句中的 select 语句，称为子查询。例： select first name from employees where department_id in(select department_id from departments where location_id=1700); mysql 多行操作符，in,not in, any, some, all12345678910111213141516# 一、where 或 having 后面的子查询# 1.标量子查询 查询谁得工资比 abel 高 select * from employees where salary &gt; (select salary from employees where last_name = &apos;abel&apos;);# 2.列子查询 select last_name from employees where department_id in(select distinct department_id from departments where location_id in(1400,1700));# 3.行子查询 select * from employees where (employee_id,salary)=(select min(employee_id), max(salary) from employees);# 二、select 后面的子查询# 1. 查询每个部门的员工个数 select d.*,(select count(*) from employees e where e.department_id=d.department_id) from departments d; # 三、from 后面的子查询# 1.查询每个部门的平均工资等级 select ag_dep.*,g.grade_level from (select avg(salary) ag,department_id from employees group by department_id) ag_dep inner join job_grades g on ag_dep.ag between lowest_sal and highesh_sal;# 四、exists 后面（相关子查询）;select exists() 判断是否存在# 1. 查询有员工的部门名 select department_name from departments d where exists(select * from employees e where d.department_id=e.department_id); 8.分页查询12345# 查询前 5 条信息select * from employees limit 0,5;select * from employees limit 5;# 查询第 11 条到第 25 条select * from employees limit 10,15; 9.联合查询 只是多添加了一些数据,前后列必须一样。123select * from employees where email like &apos;%a%&apos;UNION select * from employees where department_id&gt;90; DML语言插入语句 insert into 表名(列名,…) values(值1,..); insert into 表名 values(值1,..); # 所有列，并且顺序和表一样 insert into 表名 set 列=值,列=值;修改语句 update 表名 set 列=值,列=值,… where 条件; update 表1 别名 inner|left|right join 表2 别名 on 连接条件 set 列=值,… where 条件;删除语句 delete from 表名 where 条件; truncate table 表名; DDL 数据定义语言库的管理12345678# 创建库create database books;# 不能存在则创建。create database if not exists books;# 更改字符集alter database books character set gbk;# 库的删除drop database if exists books; 表的管理123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141# 创建# create table 表名(# 列名 列的类型 [(长度) 约束],# 列名 列的类型 [(长度) 约束],# 列名 列的类型 [(长度) 约束],# )create table book ( id int, bName varchar(20), price double, authorId int, publishData datetime);# 修改## 修改列名alter table book change column publishdate pubDate datetime;## 修改类型约束alter table book modify column pubdate timestamp;## 添加列alter table author add column annual double;## 删除列alter table author drop column annual;## 修改表名alter table author rename to book_author;## 删除drop table book_author;# 表的复制## 复制表的结构create table copy like author;## 复制结构和数据create table copy2 select * from author;## 复制部分数据或部分列CREATE TABLE copy3 SELECT id,name FROM author WHERE id&gt;3;## 复制部分结构CREATE TABLE copy4 SELECT id,name FROM author where 0;# 表的类型和约束## 整型### tinyint(1字节)\smallint（2字节）\mediumint\int（4字节）\bigint（8字节）###1. 如果不设置无符号，默认为有符号###2. int后面有默认长度无需设置。如果设置长度必须搭配 zerofill，表示显示的最小宽度，此时 unsigned 无效create table tab_int ( t1 int, t2 int UNSIGNED, t3 int(6) ZEROFILL);## 小数### 浮点型 float\double （M,D）### 定点型 dec\decimalcreate table tab_float( f1 float(5,2), f2 double(5,2), f3 decimal(5,2));###1. 第一个参数表示总共几位数，第二个参数表示小数点后几位###2. 超过则显示临界值，decimal 默认 M=10,D=0 float,double 或根据插入数字自行计算。## 字符### char/varchar#### varchar 相对节省空间，但效率低一些。 char(M) M默认是1，varchar(M) M必须填。### enum 不区分大小写create table tab_char( c1 ENUM(&apos;A&apos;,&apos;B&apos;));### set 可以一次插入多个 不区分大小写create table tab_set( c1 set(&apos;A&apos;,&apos;B&apos;,&apos;C&apos;));## 日期### date\datetime\timestamp\time\year### timestamp 与 datetime 都显示日期时间，timestamp 字节数较小，受时区影响## 表的约束/* create table 表名 ( 字段名,字段类型,列级约束, 字段名,字段类型,列级约束, 表级约束)*/###1. not null###2. default###3. primary key 用于保证字段唯一性，并且非空###4. unique 用于保证字段唯一性，可以为空###5. foreign key 外键用于限制该字段的值必须来自于主表的关联列的值，在从表添加约束### 列级约束：除了5都支持create table stuinfo( id INT PRIMARY KEY, name VARCHAR(20) NOT NULL , gender CHAR(1), seat INT UNIQUE , age INT DEFAULT 18, majorId INT REFERENCES major(id) # 不生效);### 外键不生效### 表级约束：除了非空、默认，其他都支持create table stuinfo( id INT, name VARCHAR(20), gender INT, age INT, majorid INT, CONSTRAINT pk PRIMARY KEY(id), CONSTRAINT uq UNIQUE (seat), CONSTRAINT fk_stuinfo_major FOREIGN KEY (marjorid) REFERENCES major(id) #外键);### CONSTRAINT name 可以省略show index from stuinfo;#查看索引信息### 主键和唯一的区别### 保证唯一性 是否允许空 一个表中可以有多个 允许组合### 主键 是 否 否 是### 唯一 是 是 是 是/* 外键 1。在从表中设置外键 2。从表和主表 外键列类型要求一致或兼容，名称无要求 3。主表关联列必须是一个key（一般是主键或唯一） 4。插入数据时先插入主表，再插入从表；删除时先删除从表，在删除主表。*/### 列级约束 和表级约束的修改alter table stuinfo modify column seat int unique;alter table stuinfo add unique(seat);### 删除主键alter table stuinfo drop index seat; alter table stuinfo drop foreign key fk_stuinfo_major;### 标识列 auto_increment 自增长CREATE TABLE tab_identity( id INT PRIMARY KEY AUTO_INCREMENT);show VARIABLES LIKE &apos;%auto_increment%&apos;;SET AUTO_INCREMENT_INCREMENT =3;# 修改步长为3#标识列必须是一个 key（索引） ，只能有一个标识列，标识列必须是数字类型。 TCL 事务控制语言存储引擎是指在mysql中的数据用各种不同的技术存储在文件（内存）中，通过show engines查看引擎。mysql中的引擎有innodb,myisam,memory,只有innodb支持事务。1SHOW ENGINES ;#查看所有的数据库引擎 事务的acid属性 原子性，要么都成功要么都失败，不能再分割。 一致性，事务必须从一个一致性状态，变换到另一个一致性状态。 隔离性, 事务与并发事务之间不互相干扰。 持久性，操作一旦被提交就是永久性的。事务的创建 隐式事务：事务没有明显的开始和结束标记，比如insert、update、delete语句。 显式事务：有开启结束的标记1234567891011show variables like &apos;autocommit&apos;;#查看事务# 步骤1：开启事务set autocommit=0;start transaction;#可选的# 步骤2：编写sql。。。# 步骤3：结束事务commit;#提交rollback;#回滚SAVEPOINT 保存点;#设置保存点rollback to 保存点;#回滚到保存点 多个事务的并发问题 脏读。 不可重复读。 幻读。通过事务的隔离级别解决问题1234567891011select @@tx_isolation;#查看隔离级别/* 脏读 不可重复读 幻读 1.read uncommitted: 是 是 是 2.read committed 否 是 是 3.repeatable read 否 否 是 4.serializable 否 否 否 mysql 默认 repeatable read oracle 默认 read committed 设置隔离级别 set session|global transaction isolation level 隔离级别 */ 视图 通过表动态生成的数据，虚拟的表，只保存sql逻辑，不保存查询结果 应用场景多个地方使用到同样的查询结果，该查询结果sql比较复杂123456CREATE VIEW 视图名 AS SELECT * FROM user where id&gt;3;#创建视图alter VIEW 视图名 AS SELECT * FROM user where id&gt;4;#创建修改select * from 视图名;#使用视图DROP VIEW 视图名;#删除视图DESC 视图名;#查看视图SHOW CREATE VIEW 视图名;#查看视图创建过程 变量 系统变量：全局变量，会话变量。自定义变量：用户变量，局部变量 系统变量123456789# 1.查看所有系统变量# SHOW GLOBAL|session variables# 2.查看满足条件的部分系统变量# show global|session variables like &apos;%char%&apos;# 3.查看指定的某个系统变量的值# select @@global|session.系统变量名;# 4.为某个系统变量赋值# set global|session 系统变量名 = 值 # 或者 set @@global|session.系统变量名=值; 自定义变量1234567# 声明并初始化## set @用户变量名=值## 或者 set @用户变量名:=值## 或者 select count(*) into 变量名 from emplooyees;# 查看变量## select @变量名; 局部变量12345678# 声明## declare 变量名 类型; ## declare 变量名 类型 default 值# 赋值## set @变量名=值## 或者 set @变量名:=值## 或者 select count(*) into 变量名 from employees;]]></content>
      <categories>
        <category>it</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博客]]></title>
    <url>%2F2018%2F08%2F06%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[hello world !this is my first blog 没有其他内容了。。。]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
</search>
